glm.fit(shuttle$wind, shuttle$use, offset=rep(odds))
mdl <- glm(use ~ wind, binomial, shuttle)
summary(mdl)
odds
mdl <- glm(use ~ wind, binomial, shuttle, offset = magn)
mdl <- glm(use ~ wind, binomial, shuttle, offset = as.numeric(magn))
summary(mdl)
InsectSprays
mdl2 <- glm(InsectSprays$count~InsectSprays$spray, poisson)
summary(mdl2)
2.67/.056
subset(InsectSprays, spray=='A')
sprayA <- subset(InsectSprays, spray=='A')
sprayC <- subset(InsectSprays, spray=='C')
mdlA <- glm(InsectSprays$count~sprayA$spray, poisson)
mdlA <- glm(sprayA$count~sprayA$spray, poisson)
A <- mean(sprayA$count)
C <- mean(sprayC$count)
A/C
sprayB <- subset(InsectSprays, spray=='B')
B <- mean(sprayB$count)
A/B
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
qplot(x,y)
plot(x,y)
mdl <- glm(use ~ wind, binomial, shuttle)
odds <- predict(mdl, data.frame(wind=c(1,0)))
mdl <- glm(use ~ as.factor(wind), binomial, shuttle)
odds <- predict(mdl, data.frame(wind=c(1,0)))
odds <- predict(mdl, data.frame(as.factor(wind)=c(1,0)))
odds <- predict(mdl, data.frame(as.factor(wind)=c('1','0')))
mdl <- glm(use ~ as.factor(wind), binomial, shuttle)
summary(model)
summary(mdl)
1.03/-.03
shuttle
summary(mdl)
mdl2 <- glm(use ~ 1-mdl1, binomial, shuttle)
mdl1
mdl
mdl2 <- glm(use ~ 1-mdl, binomial, shuttle)
mdl2 <- glm(use ~ 1, binomial, shuttle)
summary(mdl2)
?caret
??caret
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
install.packages(c("ISLR", "kernlab"))
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
dim(training); dim(testing)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
hist(as.numeric(training$SuperPlasticizer)
)
hist(as.numeric(training$SuperPlasticizer))
?hist
hist(as.numeric(training$SuperPlasticizer, breaks=5))
hist(as.numeric(training$SuperPlasticizer, breaks=2))
training$SuperPlasticizer
str(training)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer)+1)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
library(ISLR); library(ggplot2); library(caret)
data(Wage); Wage <- subset(Wage, select=-c(logwage))
summary(Wage)
data(Wage)
summary(Wage)
?Wage
hist(training$Superplasticizer)
hist(log(training$Superplasticizer)+1)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(training)
dim(training)
dim(testing)
str(training)
qplot(CompressiveStrength~Superplasticizer, data=training)
qplot(CompressiveStrength,Superplasticizer, data=training)
qplot(Superplasticizer,CompressiveStrength, data=training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?preProcess
preProc <- preProcess((training[, 57:68]), method="pca", pcaComp=12)
preProc
IL_PC <- predict(preProc, (training[, 57:68]))
plot(IL_PC[,1], IL_PC[,2], col=typeColor)
plot(IL_PC[,1], IL_PC[,2], col=Insulin)
trainPC <- predict(preProc, (training[, 57:68]))
modelFit<- train(training$diagnosis~., method="glm", data=trainPC)
library(e1071)
install.packages("e1071")
library(e1071)
modelFit<- train(training$diagnosis~., method="glm", data=trainPC)
testPC <- predict(preProc, (training[, 57:68]))
confusionMatrix(testing$diagnosis, predict(modelFit, testPC)
)
preProcess((training[, 57:68]), method="pca", pcaComp=12)
preProcess((training[, 57:68]), method="pca", pcaComp=12)$std
preProcess((training[, 57:68]), method="pca", pcaComp=12)$thresh
preProcess((training[, 57:68]), method="pca", pcaComp=11)$thresh
preProcess((training[, 57:68]), method="pca", pcaComp=10)$thresh
preProcess((training[, 57:68]), method="pca", pcaComp=7)$thresh
preProcess((training[, 57:68]), method="pca", pcaComp=12)$ranges
preProcess((training[, 57:68]), method="pca", pcaComp=12)$dim
preProcess((training[, 57:68]), method="pca", pcaComp=12)$ranges
preProcess((training[, 57:68]), method="pca", pcaComp=12)$numComp
preProcess((training[, 57:68]), method="pca", pcaComp=8)$numComp
preProcess((training[, 57:68]), method="pca", pcaComp=8)$numComp(.9)
preProc <- preProcess((training[, 57:68]), method="pca", pcaComp=12)
numComp(preProc)
numComp(preProc)$numComp
preProc$numComp
summary(preProc)
preProc$rotation
preProc <- preProcess((training[, 58:69]), method="pca", pcaComp=12)
preProc$rotation
preProc <- preProcess((training[, 58:69]), method="pca", thresh=.90)
preProc$rotation
preProc <- preProcess((training[, 58:69]), method="pca", thresh=.5)
preProc$rotation
data(iris)
str(iris)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain, ]
testing <- iris[-inTrain, ]
dim(training); dim(testing)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
modFit <- train(Species~., method="rpart", data = training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="classification tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.2)
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle")
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
?rattle
?fancyRpartPlot
library("rpart.plot")
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain, ]
testing <- iris[-inTrain, ]
dim(training); dim(testing)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
library(ggplot2)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
data(iris); library(ggplot2)
names(iris)
table(iris$Species)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
data(iris); library(ggplot2)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain, ]
testing <- iris[-inTrain, ]
dim(training); dim(testing)
library(caret)
install.packages(c("boot", "class", "cluster", "codetools", "colorspace", "data.table", "DBI", "digest", "dplyr", "evaluate", "foreign", "formatR", "Formula", "ggplot2", "highr", "Hmisc", "httr", "jsonlite", "KernSmooth", "knitr", "Lahman", "lattice", "lazyeval", "magrittr", "manipulate", "markdown", "MASS", "Matrix", "mgcv", "mime", "nlme", "nnet", "plyr", "quantmod", "RColorBrewer", "Rcpp", "RCurl", "reshape2", "rmarkdown", "rpart", "RSQLite", "sfsmisc", "spatial", "sqldf", "stringr", "survival", "swirl", "testthat", "tidyr", "zoo"))
install.packages(c("boot", "class", "cluster", "codetools", "colorspace",
install.packages("manipulate")
install.packages("ggplot2")
library(caret)
install.packages(caret)
install.packages("caret")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
data(iris); library(ggplot2)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain, ]
testing <- iris[-inTrain, ]
dim(training); dim(testing)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
library(caret)
modFit <- train(Species~., method="rpart", data = training)
print(modFit$finalModel)
install.packages("e1071")
library(caret)
modFit <- train(Species~., method="rpart", data = training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="classification tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
library(rattle)
?rattle
install.packages("rplotengine")
library("rplotengine", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
fancyRpartPlot(modFit$finalModel)
install.packages("rplot.plot")
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("caret")
install.packages("e1071")
data(iris); library(ggplot2)
names(iris)
table(iris$Species)
trying to predict species
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain, ]
testing <- iris[-inTrain, ]
dim(training); dim(testing)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
library(caret)
modFit <- train(Species~., method="rpart", data = training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="classification tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
install.packages("rattle")
install.packages("rpart.plot")
library(rattle)
fancyRpartPlot(modFit$finalModel)
predict(modFit, newdata=testing)
library(kernlab)
install.packages("kernlab")
library(kernlab)
predict(modFit, newdata=testing)
library(caret)
install.packages("caret")
library(caret)
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("caret")
library(caret)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(
lib  = lib <- .libPaths()[1],
pkgs = as.data.frame(installed.packages(lib), stringsAsFactors=FALSE)$Package,
type = 'source'
)
install.packages("caret")
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
remove.packages("caret")
install.packages("caret")
data(iris); library(ggplot2)
names(iris)
table(iris$Species)
library(caret)
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
remove.packages("caret")
library("lubridate", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("ISLR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("kernlab", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("UsingR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("Hmisc", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c("Hmisc", "caret"))
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
setwd("~/Desktop/Shiny/VendorPayments")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
runApp()
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
runApp()
Payments2012_full <- read.csv("vendor_payments_2012_all.csv", header = TRUE, quote = "",
row.names = NULL)
Payments2013_full <- read.csv("vendor_payments_2013_all.csv", header = TRUE, quote = "",
row.names = NULL)
Payments2014_full <- read.csv("vendor_payments_2014_all.csv", header = TRUE, quote = "",
row.names = NULL)
Payments2012 <- subset(Payments2012, select= c(Month, Calendar.Year, Agency, Total.Annual.Expenditure.by.Program ))
Payments2013 <- subset(Payments2013, select= c(Month, Calendar.Year, Agency, Total.Annual.Expenditure.by.Program ))
Payments2014 <- subset(Payments2014, select= c(Month, Calendar.Year, Agency, rTotal.Annual.Expenditure.by.Program ))
colnames(Payments2012) <- c("month", "year", "agency", "amount")
colnames(Payments2013) <- c("month", "year", "agency", "amount")
colnames(Payments2014) <- c("month", "year", "agency", "amount")
# byType2012 <- group_by(Payments2012, year, month, agency)
# TypeTotals2012 <- summarise(byType2012, totalAmount =sum(amount))
FY2012 <- subset(Payments2012, select = c(agency, amount))
byFY2012 <- group_by(FY2012, agency)
TotalFY2012 <- summarise(byFY2012, total = sum(amount))
FY2013 <- subset(Payments2013, select = c(agency, amount))
byFY2013 <- group_by(FY2013, agency)
TotalFY2013 <- summarise(byFY2013, total = sum(amount))
FY2014 <- subset(Payments2014, select = c(agency, amount))
byFY2014 <- group_by(FY2014, agency)
TotalFY2014 <- summarise(byFY2014, total = sum(amount))
TotalFY2012$fiscalYear <- "2012"
TotalFY2013$fiscalYear <- "2013"
TotalFY2014$fiscalYear <- "2014"
allFY <- bind_rows(TotalFY2012, TotalFY2013, TotalFY2014)
allFY$fiscalYear <- as.factor(allFY$fiscalYear)
Payments2012 <- subset(Payments2012_full, select= c(Month, Calendar.Year, Agency, Total.Annual.Expenditure.by.Program ))
Payments2013 <- subset(Payments2013_full, select= c(Month, Calendar.Year, Agency, Total.Annual.Expenditure.by.Program ))
Payments2014 <- subset(Payments2014_full, select= c(Month, Calendar.Year, Agency, rTotal.Annual.Expenditure.by.Program ))
colnames(Payments2012) <- c("month", "year", "agency", "amount")
colnames(Payments2013) <- c("month", "year", "agency", "amount")
colnames(Payments2014) <- c("month", "year", "agency", "amount")
Payments2012 <- subset(Payments2012_full, select= c(Month, Calendar.Year, Agency, Total.Annual.Expenditure.by.Program ))
Payments2013 <- subset(Payments2013_full, select= c(Month, Calendar.Year, Agency, Total.Annual.Expenditure.by.Program ))
Payments2014 <- subset(Payments2014_full, select= c(Month, Calendar.Year, Agency, Total.Annual.Expenditure.by.Program ))
colnames(Payments2012) <- c("month", "year", "agency", "amount")
colnames(Payments2013) <- c("month", "year", "agency", "amount")
colnames(Payments2014) <- c("month", "year", "agency", "amount")
FY2012 <- subset(Payments2012, select = c(agency, amount))
byFY2012 <- group_by(FY2012, agency)
TotalFY2012 <- summarise(byFY2012, total = sum(amount))
FY2013 <- subset(Payments2013, select = c(agency, amount))
byFY2013 <- group_by(FY2013, agency)
TotalFY2013 <- summarise(byFY2013, total = sum(amount))
FY2014 <- subset(Payments2014, select = c(agency, amount))
byFY2014 <- group_by(FY2014, agency)
TotalFY2014 <- summarise(byFY2014, total = sum(amount))
TotalFY2012$fiscalYear <- "2012"
TotalFY2013$fiscalYear <- "2013"
TotalFY2014$fiscalYear <- "2014"
allFY <- bind_rows(TotalFY2012, TotalFY2013, TotalFY2014)
allFY$fiscalYear <- as.factor(allFY$fiscalYear)
str(TotalFY2012)
str(TotalFY2013)
str(TotalFY2014)
str(allFY)
tail(allFY)
source('~/Desktop/Shiny/VendorPayments/server.R')
shiny::runApp()
allFY[1:12,]
allFY$total <- round(allFY$total, 0)
allFY[1:12,]
printCurrency <- function(value, currency.sym="$", digits=2, sep=",", decimal=".") {
paste(
currency.sym,
formatC(value, format = "f", big.mark = sep, digits=digits, decimal.mark=decimal),
sep=""
)
}
printCurrency(123123.334)
allFY$total <- paste("$", formatC(format="f", big.mark = sep, digits = digits, decimal.mark=decimal), sep = "")
allFY$total <- paste("$", formatC(allFY$totalformat="f", big.mark = sep, digits = digits, decimal.mark=decimal), sep = "")
allFY$total <- paste("$", formatC(allFY$total,format="f", big.mark = sep, digits = digits, decimal.mark=decimal), sep = "")
allFY$total <- paste("$", formatC(allFY$total,format="f", big.mark = ",", digits = 2, decimal.mark="."), sep = "")
allFY[1:12,]
source('~/Desktop/Shiny/VendorPayments/server.R')
shiny::runApp()
library(shiny)
library(dplyr)
# Load, clean, and store the data
Payments2012_full <- read.csv(url("http://tn.gov/opengov/downloadFiles/vendor_payments_2012_all.csv"), header = TRUE, quote = "",
row.names = NULL)
Payments2013_full <- read.csv(url("http://tn.gov/opengov/downloadFiles/vendor_payments_2013_all.csv"), header = TRUE, quote = "",
row.names = NULL)
Payments2014_full <- read.csvurl(("http://tn.gov/opengov/downloadFiles/vendor_payments_2014_all.csv"), header = TRUE, quote = "",
row.names = NULL)
Payments2012 <- subset(Payments2012_full, select= c(Month, Calendar.Year, Agency, Total.Annual.Expenditure.by.Program ))
Payments2013 <- subset(Payments2013_full, select= c(Month, Calendar.Year, Agency, Total.Annual.Expenditure.by.Program ))
Payments2014 <- subset(Payments2014_full, select= c(Month, Calendar.Year, Agency, Total.Annual.Expenditure.by.Program ))
colnames(Payments2012) <- c("month", "year", "agency", "amount")
colnames(Payments2013) <- c("month", "year", "agency", "amount")
colnames(Payments2014) <- c("month", "year", "agency", "amount")
FY2012 <- subset(Payments2012, select = c(agency, amount))
byFY2012 <- group_by(FY2012, agency)
TotalFY2012 <- summarise(byFY2012, total = sum(amount))
FY2013 <- subset(Payments2013, select = c(agency, amount))
byFY2013 <- group_by(FY2013, agency)
TotalFY2013 <- summarise(byFY2013, total = sum(amount))
FY2014 <- subset(Payments2014, select = c(agency, amount))
byFY2014 <- group_by(FY2014, agency)
TotalFY2014 <- summarise(byFY2014, total = sum(amount))
TotalFY2012$fiscalYear <- "2012"
TotalFY2013$fiscalYear <- "2013"
TotalFY2014$fiscalYear <- "2014"
allFY <- bind_rows(TotalFY2012, TotalFY2013, TotalFY2014)
allFY$fiscalYear <- as.factor(allFY$fiscalYear)
allFY$total <- paste("$", formatC(allFY$total,format="f", digits= 0, big.mark = ","), sep = "")
save(allFY, "allFY.Rda")
library(shiny)
library(dplyr)
# Load, clean, and store the data
Payments2012_full <- read.csv(url("http://tn.gov/opengov/downloadFiles/vendor_payments_2012_all.csv"), header = TRUE, quote = "",
row.names = NULL)
Payments2013_full <- read.csv(url("http://tn.gov/opengov/downloadFiles/vendor_payments_2013_all.csv"), header = TRUE, quote = "",
row.names = NULL)
Payments2014_full <- read.csvurl(("http://tn.gov/opengov/downloadFiles/vendor_payments_2014_all.csv"), header = TRUE, quote = "",
row.names = NULL)
FY2012 <- subset(Payments2012_full, select= c(Month, Agency, Total.Annual.Expenditure.by.Program ))
FY2013 <- subset(Payments2013_full, select= c(Month, Agency, Total.Annual.Expenditure.by.Program ))
FY2014 <- subset(Payments2014_full, select= c(Month, Agency, Total.Annual.Expenditure.by.Program ))
byFY2012 <- group_by(FY2012, Agency)
TotalFY2012 <- summarise(byFY2012, total = sum(Total.Annual.Expenditure.by.Program))
byFY2013 <- group_by(FY2013, Agency)
TotalFY2013 <- summarise(byFY2013, total = sum(Total.Annual.Expenditure.by.Program))
byFY2014 <- group_by(FY2014, Agency)
TotalFY2014 <- summarise(byFY2014, total = sum(Total.Annual.Expenditure.by.Program))
TotalFY2012$fiscalYear <- "2012"
TotalFY2013$fiscalYear <- "2013"
TotalFY2014$fiscalYear <- "2014"
allFY <- bind_rows(TotalFY2012, TotalFY2013, TotalFY2014)
colnames(allFY) <- c("Month", "Agency", "TotalVendorPayments")
allFY$fiscalYear <- as.factor(allFY$fiscalYear)
allFY$total <- paste("$", formatC(allFY$total,format="f", digits= 0, big.mark = ","), sep = "")
save(allFY, file = "allFY.Rda")
source('~/Desktop/Shiny/VendorPayments/server.R')
shiny::runApp()
load(allFY.Rda)
load("~/Desktop/Shiny/VendorPayments/allFY.Rda")
setwd("~/Desktop/Shiny/VendorPayments")
allFY[1:12,]
library(shiny)
library(dplyr)
# Load, clean, and store the data
Payments2012_full <- read.csv(url("http://tn.gov/opengov/downloadFiles/vendor_payments_2012_all.csv"), header = TRUE, quote = "",
row.names = NULL)
Payments2013_full <- read.csv(url("http://tn.gov/opengov/downloadFiles/vendor_payments_2013_all.csv"), header = TRUE, quote = "",
row.names = NULL)
Payments2014_full <- read.csvurl(("http://tn.gov/opengov/downloadFiles/vendor_payments_2014_all.csv"), header = TRUE, quote = "",
row.names = NULL)
FY2012 <- subset(Payments2012_full, select= c(Agency, Total.Annual.Expenditure.by.Program ))
FY2013 <- subset(Payments2013_full, select= c(Agency, Total.Annual.Expenditure.by.Program ))
FY2014 <- subset(Payments2014_full, select= c(Agency, Total.Annual.Expenditure.by.Program ))
byFY2012 <- group_by(FY2012, Agency)
TotalFY2012 <- summarise(byFY2012, Total = sum(Total.Annual.Expenditure.by.Program))
byFY2013 <- group_by(FY2013, Agency)
TotalFY2013 <- summarise(byFY2013, Total = sum(Total.Annual.Expenditure.by.Program))
byFY2014 <- group_by(FY2014, Agency)
TotalFY2014 <- summarise(byFY2014, Total = sum(Total.Annual.Expenditure.by.Program))
TotalFY2012$fiscalYear <- "2012"
TotalFY2013$fiscalYear <- "2013"
TotalFY2014$fiscalYear <- "2014"
allFY <- bind_rows(TotalFY2012, TotalFY2013, TotalFY2014)
allFY[1:12,]
colnames(allFY) <- c("Agency", "Total", "Fiscal.Year")
allFY$Fiscal.Year <- as.factor(allFY$Fiscal.Year)
allFY$Total <- paste("$", formatC(allFY$Total,format="f", digits= 0, big.mark = ","), sep = "")
save(allFY, file = "allFY.Rda")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source('~/Desktop/Shiny/VendorPayments/server.R')
shiny::runApp()
source('~/Desktop/Shiny/VendorPayments/server.R')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
tagList?
names(tags)
shiny::runApp()
subset(allFY, Agency < "a")
temp <- allFY
temp$Agency < "a" <- "Protected"
temp[temp$Agency < "a"] <- "Protected"
subset(temp, Agency < "a")
str(temp)
temp$Agency[temp$Agency < "a"] <- "Protected"
subset(temp, Agency < "a")
temp[1:30, ]
allFY$Agency[allFY$Agency < "a"] <- "protected vendor payments"
save(allFY, file = "allFY.Rda")
shiny::runApp()
allFY$Agency[allFY$Agency == "protected vendor payments"] <- "(protected vendor payments)"
save(allFY, file = "allFY.Rda")
shiny::runApp()
install.packages("DT")
shiny::runApp()
shiny::runApp()
setwd("~/Desktop/Coursera/Shiny-VendorPayments")
shiny::runApp()
